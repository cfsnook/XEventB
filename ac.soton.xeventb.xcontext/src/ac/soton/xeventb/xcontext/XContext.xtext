/*******************************************************************************
 * Copyright (c) 2016,2018 University of Southampton.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     University of Southampton - initial API and implementation
 *******************************************************************************/
grammar ac.soton.xeventb.xcontext.XContext with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT)

//import "http://emf.eventb.org/models/core/context/2014" as econtext
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore#//context"as econtext
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://soton.ac.uk/models/eventb/record/2019" as erecords

XContext returns econtext::Context:
	{econtext::Context}
	'context' name=ID
	('extends' extends+=[econtext::Context |QualifiedName]+)?
	('sets' sets+=XCarrierSet+)?
	('constants' constants+=XConstant+)?
	('records' extensions += Record+)?
	('axioms' axioms+=XAxiom+)?
	'end'
;

QualifiedName:
   ID ('.' ID)*
 ; 


XCarrierSet returns econtext::CarrierSet:
	{econtext::CarrierSet}
	name=ID
;


XConstant returns econtext::Constant:
	{econtext::Constant}
	name=ID
;


XAxiom returns econtext::Axiom:
	{econtext::Axiom}	
	(theorem?='theorem')? name=XLABEL predicate=XFormula
;


terminal XLABEL returns ecore::EString:
	'@' !(':')+ ':'
;

XFormula returns ecore::EString:
	(
		EVENTB_IDENTIFIER_KEYWORD |
		EVENTB_PREDICATE_SYMBOLS |
		EVENTB_EXPRESSION_SYMBOLS |
		ID |
		INT |
		UNTRANSLATED_TOKEN
	)+ 
;

EVENTB_IDENTIFIER_KEYWORD returns ecore::EString:
	'BOOL' |
	'FALSE' |
	'TRUE' |
	'bool' |
	'card' |
	'dom' |
	'finite' |
	'id' |
	'inter' |
	'max' |
	'min' |
	'mod' |
	'pred' |
	'prj1' |
	'prj2' |
	'ran' |
	'succ' |
	'union' |
	'ℕ1' |
	'ℕ' |
	'ℙ1' |
	'ℙ' |
	'ℤ'
;

EVENTB_PREDICATE_SYMBOLS returns ecore::EString:
	'(' | // Predicate calculus symbols
	')' |
	'⇔' | 
	'⇒' |
	'∧' | '&' |
	'∨' |
	'¬' |
	'⊤' |
	'⊥' |
	'∀' | '!' |
	'∃' | '#' |
	',' |
	'·' | '.' |
	'=' | // Build predicates from expressions
	'≠' |
	'≤' |
	'<' |
	'≥' |
	'>' |
	'∈' | ':' | // Include this for Rodin keyboard
	'∉' | 
	'⊂' |
	'⊄' |
	'⊆' |
	'⊈' |
	'partition' // This is missing from the Rodin D7 deliverable
;

EVENTB_EXPRESSION_SYMBOLS returns ecore::EString:
	'↔' | // Symbols for building set of relations
	'' |
	'' |
	'' |
	'⇸' |
	'→' |
	'⤔' |
	'↣' |
	'⤀' |
	'↠' |
	'⤖' |
	'{' | // Symbols for manipulating sets
	'}' |
	'↦' |
	'∅' |
	'∩' |
	'∪' |
	'∖' |
	'×' |
	'[' | // Symbols for manipulating functions and relations
	']' |
	'' |
	'∘' |
	';' |
	'⊗' |
	'∥' |
	'∼' |
	'◁' |
	'⩤' |
	'▷' |
	'⩥' |
	'λ' | '%' // Symbols for quantified expressions
	'⋂' |
	'⋃' |
	'∣' |
	'‥' | // Symbols for arithmetic expressions
	'+' |
	'−' | '-' |
	'∗' | '*' |
	'÷' | '/' | 
	'^' |
	'\\' // Allowed for LaTeX combos
;


@Override 
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ') ('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ'|'0'..'9' | "'")*;

// This to allow untranslated mathematical symbols in XFormula
terminal UNTRANSLATED_TOKEN: ('!'|'#'|'%'|'&'|'*'|'-'|':'|'|'|'\\'|','|'~'|'/'|'.')+;

@Override 
terminal STRING: '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

/*
 * support for records
 */
 
 Record returns erecords::Record:
	{erecords::Record}
	'record' name = ID
		('extends' subsets=[erecords::Record|ID])?
		(fields+=Field (fields+=Field)*)?
;

FieldType returns ecore::EString:
	(
		ID |
		EVENTB_IDENTIFIER_KEYWORD 
	)
;

Field returns erecords::Field:
	    name = ID (':')
	    (multiplicity=Multiplicity)?
		(type= FieldType)	
;

enum Multiplicity returns erecords::Multiplicity:
				ONE = 'one' | MANY = 'many' | OPTIONAL = 'opt';
