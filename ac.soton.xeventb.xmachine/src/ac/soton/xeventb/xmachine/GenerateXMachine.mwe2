/*******************************************************************************
 *  Copyright (c) 2016,2018 University of Southampton.
 *
 *  This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License 2.0
 *  which accompanies this distribution, and is available at
 *  https://www.eclipse.org/legal/epl-2.0/
 *
 *  SPDX-License-Identifier: EPL-2.0
 *
 *  Contributors:
 *    University of Southampton - initial API and implementation 
 *******************************************************************************/
module ac.soton.xeventb.xmachine.GenerateXMachine

//import org.eclipse.emf.mwe.utils.StandaloneSetup
//import org.eclipse.emf.mwe.utils.*
//import org.eclipse.xtext.generator.*
//import org.eclipse.xtext.ui.generator.*

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.emf.mwe.utils.StandaloneSetup


var rootPath = ".."
//var grammarURI = "classpath:/ac/soton/xeventb/xmachine/XMachine.xtext"
//var fileExtensions = "bumx"
//var projectName = "ac.soton.xeventb.xmachine"
//var runtimeProject = "${rootPath}/${projectName}"
//var generateXtendStub = true

Workflow {
//	bean = StandaloneSetup {
//		scanClassPath  = true
//		platformUri = "${runtimeProject}/.."
//		registerGeneratedEPackage = "org.eventb.emf.core.context.ContextPackage"
//        registerGeneratedEPackage = "org.eventb.emf.core.machine.MachinePackage"
//
//		registerGeneratedEPackage = "org.eventb.emf.core.CorePackage"
//		registerGenModelFile = "platform:/resource/org.eventb.emf.core/model/eventbcore.genmodel"
//		
//		registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"
//		registerGeneratedEPackage = "org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage"
//		registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
//		registerGenModelFile = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
//
//	    registerGeneratedEPackage = "ac.soton.eventb.emf.inclusion.InclusionPackage"
//	    registerGenModelFile = "platform:/resource/ac.soton.eventb.emf.inclusion/model/inclusion.genmodel"
//		
//
//	}
//
//	component = DirectoryCleaner {
//		directory = "${runtimeProject}/src-gen"
//	}
//
//	component = DirectoryCleaner {
//		directory = "${runtimeProject}.ui/src-gen"
//	}
//
//	component = Generator {
//		pathRtProject = runtimeProject
//		pathUiProject = "${runtimeProject}.ui"
//		pathTestProject = "${runtimeProject}.tests"
//		projectNameRt = projectName
//		projectNameUi = "${projectName}.ui"
//		language = auto-inject {
//			uri = grammarURI
//
//			// Java API to access grammar elements (required by several other fragments)
//			fragment = grammarAccess.GrammarAccessFragment auto-inject {}
//
//			// generates Java API for the generated EPackages
//			// fragment = ecore.EcoreGeneratorFragment auto-inject {}
//
//			// the Ecore2Xtext specific terminal converter
//			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment auto-inject {}
//
//			// serializer 2.0
//			fragment = serializer.SerializerFragment auto-inject {
//				//generateStub = false
//			}
//
//			// the old serialization component
//			// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}
//
//			// a custom ResourceFactory for use with EMF 
//			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
//
//			// the Antlr parser
//			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
//				options = {
//					classSplitting = true
//				}
//			}
//
//			// Xtend-based API for validation 
//			fragment = validation.ValidatorFragment auto-inject {
//			// composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//			// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//			}
//
//			// old scoping and exporting API 
//			// fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
//			// fragment = exporting.QualifiedNamesFragment auto-inject {}
//
//			// scoping and exporting API
//			fragment = scoping.ImportURIScopingFragment auto-inject {}
//			fragment = exporting.QualifiedNamesFragment auto-inject {}
//			fragment = builder.BuilderIntegrationFragment auto-inject {}		
//
//			// generator API
//			fragment = generator.GeneratorFragment auto-inject {}
//
//			// formatter API 
//			// fragment = formatting.FormatterFragment auto-inject {}
//			fragment = ecore2xtext.FormatterFragment auto-inject {}
//
//			// labeling API 
//			fragment = labeling.LabelProviderFragment auto-inject {}
//
//			// outline API 
//            fragment = outline.OutlineTreeProviderFragment auto-inject {}
//            fragment = outline.QuickOutlineFragment auto-inject {}
//
//			// quickfix API
//			fragment = quickfix.QuickfixProviderFragment auto-inject {}
//
//			//content assist API 
//			fragment = contentAssist.ContentAssistFragment auto-inject {}
//
//			// antlr parser generator tailored for content assist 
//			fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {
//				options = {
//					classSplitting = true
//				}
//			}
//			
//			// generates junit test support classes into Generator#pathTestProject
//			fragment = junit.Junit4Fragment auto-inject {}
//
//			// project wizard (optional) 
//			// fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
//			//		generatorProjectName = "${projectName}.generator" 
//			// }
//
//			// rename refactoring
//			fragment = refactoring.RefactorElementNameFragment auto-inject {}
//
//			// provides the necessary bindings for java types integration
//			fragment = types.TypesGeneratorFragment auto-inject {}
//			
//			// generates the required bindings only if the grammar inherits from Xbase
//			fragment = xbase.XbaseGeneratorFragment auto-inject {}
//			
//			// generates the required bindings only if the grammar inherits from Xtype
//			fragment = xbase.XtypeGeneratorFragment auto-inject {}
//
//			// provides a preference page for template proposals
//			fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
//
//			// provides a compare view
//            fragment = compare.CompareFragment auto-inject {}
//		}
//	}
	component = XtextGenerator {
//		configuration = MyGeneratorModule{
		configuration={
			project = StandardProjectConfig {
				baseName = "ac.soton.xeventb.xmachine"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "ac.soton.xeventb.xmachine.XMachine"
			fileExtensions = "bumx"
			referencedResource = "platform:/resource/ac.soton.eventb.emf.inclusion/model/inclusion.genmodel"
			referencedResource = "platform:/resource/ac.soton.eventb.emf.containment/model/containment.genmodel"
			referencedResource = "platform:/resource/ac.soton.eventb.emf.diagrams/model/diagrams.genmodel"
			//referencedResource = "http://soton.ac.uk/models/eventb/inclusion/2017"
			referencedResource = "platform:/resource/org.eventb.emf.core/model/eventbcore.genmodel"
			referencedResource = "platform:/resource/ac.soton.eventb.emf.record/model/record.genmodel"
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			formatter = {
				generateStub = true
			}

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
		}
	}
}