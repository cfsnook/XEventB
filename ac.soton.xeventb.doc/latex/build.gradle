/**
 * Copyright (C) 2016,2020 Thai Son Hoang
 * Gradle LaTeX build file.
 *
 * Contributors
 *   Thai Son Hoang - Initial API and implementation.
 */

// The default task is 'build'
defaultTasks 'build'

/**
 * Extra Properties
 */
ext {
  BASENAME = 'user_manual'                      // The name for the main LaTeX file
  LATEX = 'pdflatex'                            // The LaTeX program
  BIBTEX = 'bibtex'                             // The BiBTeX program
  PLASTEX = 'plastex'                           // The PlasTex program
  SED = 'sed'                                   // The stream editor 
  ROOT_FOLDER = '..'                            // The root folder
  LATEX_FOLDER = ROOT_FOLDER + '/latex'         // The source LaTeX folder
  HTML_FOLDER = ROOT_FOLDER + '/html'           // The target HTML folder
  TIKZ_FILES = ['tikz-overview']                // The list of tikz files
  TOCFile = HTML_FOLDER + '/eclipse-toc.xml'    // The target TOC File
  GENERATED_EXTENSIONS = ['aux', 'bbl', 'bcf', 'blg', 'log', 'nav', 'out', 'rel', 'run.xml', 'snm', 'toc', 'vrb']                               // The list of generated extensions
}

// The default task is 'build'
defaultTasks 'build'

/*
 * The build task:
 * - Build all tasks with prefix 'PDF_BUILD'
 */
task build {
  dependsOn 'pdf', 'sed'
}

/*
 * For each suffix, create a 'PDF_BUILD' task
 * - Input files:
 *   + all class files,
 *   + all style files,
 *   + all bibliography files,
 *   + the tex file corresponding to the suffix,
 *   + the main content text file.
 *   + all files in 'figures' folder
 * - Output file: the pdf file corresponding to the suffix.
 * - The build is done by the pdf_build_steps
 */
task pdf {
  dependsOn tasks.matching {
    Task task -> task.name.startsWith('TIKZ_BUILD')
  }
  inputs.files fileTree('.').include('**/*.cls'), fileTree('.').include('**/*.sty'), fileTree('.').include('**/*.bib'), BASENAME+".tex", fileTree('./figures').include('**/*')
  outputs.file BASENAME+".pdf"
  doLast{
    pdf_build_steps(BASENAME)
  }
}

/*
 * Method to build the pdf for the given file name
 * 1. Latex
 * 2. Bibtex
 * 3. Latex
 * 4. Latex
 */
void pdf_build_steps(name) {
  exec {
    commandLine LATEX, name 
  }
/*  exec {
    commandLine BIBTEX, name 
  }
  exec {
    commandLine LATEX, name 
  }*/
  exec {
    commandLine LATEX, name 
  }
}

task clean(type: Delete) {
  dependsOn tasks.matching {
    Task task -> task.name.startsWith('CLEAN_GENERATED')
  }
}

GENERATED_EXTENSIONS.each { def extension ->
  task "CLEAN_GENERATED_$extension"(type: Delete) {
    delete fileTree('.').include('**/*.'+extension)
  }
}

task cleanall(type: Delete) {
  dependsOn clean
  dependsOn tasks.matching {
    Task task -> task.name.startsWith('CLEANALL_')
  }
}

task "CLEANALL_$BASENAME"(type: Delete) {
  delete BASENAME+".pdf"
}

TIKZ_FILES.each { def tikzFile ->
  task "TIKZ_BUILD_$tikzFile"(type: Exec) {
    inputs.file tikzFile+".tex"
    outputs.file tikzFile+".pdf"
    commandLine LATEX, tikzFile
  }
}

TIKZ_FILES.each { def tikzFile ->
  task "CLEANALL_$tikzFile"(type: Delete) {
    delete tikzFile+".pdf"
  }
}

task html(type : Exec) {
  dependsOn tasks.matching {
    Task task -> task.name.startsWith('TIKZ_BUILD')
  }
  inputs.files fileTree('.').include('**/*.cls'), fileTree('.').include('**/*.sty'), fileTree('.').include('**/*.bib'), BASENAME+".tex",  fileTree('./figures').include('**/*')
  outputs.file TOCFile
  commandLine PLASTEX, '-d', HTML_FOLDER, '--theme=python', BASENAME+".tex"
}

task sed(type : Exec) {
  dependsOn html
  commandLine SED, '-i.bak', '-f', 'sed_commands', "$project.TOCFile"
}

// 'clean' should run after 'build'
clean.shouldRunAfter build

/*
 * The 'all' task include 'build' and 'clean'.
 */
task all {
  dependsOn 'build', 'clean'
}
